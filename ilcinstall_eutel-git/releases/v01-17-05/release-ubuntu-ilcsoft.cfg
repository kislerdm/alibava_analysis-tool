import os, sys

# changes to the installation config file for ubuntu 12.04 builds!

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions.py" )
install_file = os.path.join( path_where_this_file_lives, "release-ilcsoft.cfg" )
execfile( versions_file )


# set the changes needed for Ubuntu -- different directories
MySQL_path = "/usr"
Java_version = "1.6.0"
Java_path = "/usr"

# redo this the right way...

ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )
ilcsoft = ILCSoft( ilcsoft_install_dir )


ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"


#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "svn"

###########################################################

ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"]='ON'

ilcsoft.install( MarlinUtil( MarlinUtil_version ))


ilcsoft.install( Mokka( Mokka_version ))
ilcsoft.module("Mokka").envcmake["WITH_GEANT4_UIVIS"]='ON'
#ilcsoft.module("Mokka").env["MOKKA_DEBUG"]=1
#ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1 # FIXME: CAUSES TOO MUCH LIB DEPENDENCIES .... TO BE SOLVED !!

#----------  standard reco packages

ilcsoft.install( MarlinReco( MarlinReco_version ))
ilcsoft.module("MarlinReco").envcmake["MARLINRECO_FORTRAN"] = 'OFF'

ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))
ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.install( MarlinPandora( MarlinPandora_version ))


ilcsoft.install( LCFIVertex( LCFIVertex_version ))

ilcsoft.install( CEDViewer( CEDViewer_version )) 

ilcsoft.install( Overlay( Overlay_version ))  

#ilcsoft.install( FastJetClustering( FastJetClustering_version ))

#~ ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
#~ ilcsoft.module("MarlinFastJet").download.root="marlinreco"
#~ ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").download.root="marlinreco"
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").download.root="marlinreco"
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinTrk( MarlinTrk_version ))
ilcsoft.install( KiTrack( KiTrack_version ))
ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
ilcsoft.module("Clupatra").download.root="marlinreco"
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
ilcsoft.module("LCFIPlus").download.root="marlinreco"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").download.root="marlinreco"
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )


ilcsoft.install( PathFinder( PathFinder_version ))
ilcsoft.install( MarlinTPC( MarlinTPC_version ))

ilcsoft.install( BBQ( BBQ_version ))

ilcsoft.install( Druid( Druid_version ))

ilcsoft.install( Garlic( Garlic_version ))



ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.install( KalDet( KalDet_version ))

ilcsoft.install( GBL ( GBL_version ) )

#------ slic et al
ilcsoft.link( XercesC( ilcPath + "xercesc/" + XercesC_version ))

ilcsoft.install( HepPDT( HepPDT_version ))
ilcsoft.install( GDML( GDML_version ))
ilcsoft.install( LCDD( LCDD_version ))
ilcsoft.install( SLIC( SLIC_version ))
ilcsoft.install( SlicPandora( SlicPandora_version ))
#-----------------

# DD4hep
ilcsoft.install( DD4hep( DD4hep_version )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_WITH_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0

ilcsoft.link( CED( ilcPath + "CED/" + CED_version ))

#ilcsoft.link( LCIO( ilcPath + "lcio/" + LCIO_version ))
ilcsoft.install( LCIO( LCIO_version ))
ilcsoft.module("LCIO").envcmake["INSTALL_JAR"]="OFF"

#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'

ilcsoft.install( GEAR( GEAR_version ))
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'


#ilcsoft.link( FastJet( ilcPath + "FastJet/" + FastJet_version ))

ilcsoft.link( ROOT( ilcPath + "root/" + ROOT_version ))

ilcsoft.link( CLHEP( ilcPath + "CLHEP/" + CLHEP_version ))
ilcsoft.link( GSL( ilcPath + "gsl/" + GSL_version ))
ilcsoft.link( QT( ilcPath + "QT/" + QT_version ))
ilcsoft.link( Geant4( ilcPath + "geant4/" + Geant4_version ))

ilcsoft.link( CondDBMySQL( ilcPath + "CondDBMySQL/" + CondDBMySQL_version ))


# mysql
if 'MySQL_path' in dir():
    ilcsoft.link( MySQL( MySQL_path ))

# Java
if 'Java_path' in dir():
    ilcsoft.link( Java( Java_path ))

# cmake
ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))

ilcsoft.link( ILCUTIL( ilcPath + "ilcutil/" + ILCUTIL_version ))

