##############################################################################
#
# Configuration file for installing the ILC Software release v01-14
#
# Note: Please modify the directories according to your system
#
# Author: F.Gaede, DESY
# Date: Jun 29, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions.py" )
execfile( versions_file )

# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

    ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )

ilcsoft = ILCSoft( ilcsoft_install_dir )

# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# --- set in release-versions.py ---
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
#ilcPath = "/afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/"
if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j8"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"

#--------- uncomment the following to build 32-bit mode on 64bit machines---
# default is now 64bit-native build
#
 #ilcsoft.env["CXXFLAGS"]="-m32"
 #ilcsoft.env["CFLAGS"]="-m32"
 #ilcsoft.env["FFLAGS"]="-m32"
 #ilcsoft.env["LDFLAGS"]="-m32"


#--------- set to 'OFF' to build 64-bit natively -------
ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="OFF"
#----------------------------------------------------------------

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"


#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "svn"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------


####################################################################
#
# the following tools are installed in afs:
#
# - for SL5 (32bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/
#
# - for SL5 (64bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5
#
# they can be linked from there or need to be installed on your system
#
####################################################################

#-------------------------------------------------------------------------
# prerequisites: installed versions of Java, geant4, cernlib and mysql:
#  -> modify according to your system !
#-------------------------------------------------------------------------

#  when using 'link' or 'use' please specify full path to installed package
#  or use the version installed in afs (ilcPath) 


# MySQL
if 'MySQL_path' in dir():
    ilcsoft.link( MySQL( MySQL_path ))

# Java
if 'Java_path' in dir():
    ilcsoft.link( Java( Java_path ))

# geant4
#if 'Geant4_path' in dir():
#    ilcsoft.use( Geant4 ( Geant4_path ))
#    if 'G4ENV_INIT_path' in dir():
#        ilcsoft.module("Geant4").env["G4ENV_INIT"] = G4ENV_INIT_path

# cernlib
if 'CERNLIB_path' in dir():
    ilcsoft.link( CERNLIB(  CERNLIB_path  ))


####################################################################

#----- core tools

# -- xercesc
ilcsoft.install( XercesC( XercesC_version ))
XERCESC_ROOT_DIR = ilcsoft_install_dir + '/xercesc/' + XercesC_version 

ilcsoft.install( Geant4( Geant4_version ))
geant4=ilcsoft.module("Geant4")
geant4.envcmake["GEANT4_INSTALL_DATA"]='ON'
geant4.envcmake["GEANT4_USE_SYSTEM_EXPAT"]='OFF' # ignored ??
geant4.envcmake["GEANT4_USE_SYSTEM_CLHEP"]='ON'
geant4.envcmake["GEANT4_USE_OPENGL_X11"]='ON'
geant4.envcmake["GEANT4_USE_QT"]='ON' # requires qt
#geant4.envcmake["QT_QMAKE_EXECUTABLE"]=/path/to/qmake
if 'XERCESC_ROOT_DIR' in dir():
    geant4.envcmake["XERCESC_ROOT_DIR"]=XERCESC_ROOT_DIR
#if 'XERCESC_INCLUDE_DIR' in dir() and 'XERCESC_LIBRARY' in dir():
    #geant4.envcmake["GEANT4_USE_GDML"]='ON' # requires xerces-c
    #geant4.envcmake["XERCESC_INCLUDE_DIR"]=XERCESC_INCLUDE_DIR
    #geant4.envcmake["XERCESC_LIBRARY"]=XERCESC_LIBRARY

ilcsoft.install( ILCUTIL( ILCUTIL_version ))

ilcsoft.install( LCIO( LCIO_version )) 
#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'
ilcsoft.module("LCIO").envcmake['INSTALL_JAR']='OFF'

ilcsoft.install( GEAR( GEAR_version )) 
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'

ilcsoft.install( KalTest( KalTest_version )) 

ilcsoft.install( KalDet( KalDet_version )) 


ilcsoft.install( CondDBMySQL( CondDBMySQL_version )) 
ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( CED( CED_version ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'


ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 'ON'

ilcsoft.install( MarlinUtil( MarlinUtil_version ))


ilcsoft.install( Mokka( Mokka_version ))
#ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1 # FIXME: CAUSES TOO MUCH LIB DEPENDENCIES .... TO BE SOLVED !!

#----------  standard reco packages

ilcsoft.install( MarlinReco( MarlinReco_version )) 

ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))
ilcsoft.install( MarlinPandora( MarlinPandora_version ))


ilcsoft.install( LCFIVertex( LCFIVertex_version ))

ilcsoft.install( CEDViewer( CEDViewer_version ))

ilcsoft.install( Overlay( Overlay_version ))

ilcsoft.install( FastJet( FastJet_version ))
ilcsoft.install( FastJetClustering( FastJetClustering_version ))

ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
ilcsoft.module("MarlinFastJet").download.root="marlinreco"
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").download.root="marlinreco"
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").download.root="marlinreco"
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinTrk( MarlinTrk_version ))
ilcsoft.install( KiTrack( KiTrack_version ))
ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
ilcsoft.module("Clupatra").download.root="marlinreco"
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "Physsim", Physsim_version ))
ilcsoft.module("Physsim").download.root="physsim"
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
ilcsoft.module("LCFIPlus").download.root="marlinreco"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").download.root="marlinreco"
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )


#----- config packages
#ilcsoft.install( ConfigPKG( "StandardConfig", StandardConfig_version  ))
#stdconf = ilcsoft.module( "StandardConfig")
#stdconf.download.root = "marlinreco"
#stdconf.env["STANDARDCONFIG"]=stdconf.installPath
#
#ilcsoft.install( ConfigPKG( "MokkaDBConfig", MokkaDBConfig_version )) 
#mokkadbconf = ilcsoft.module( "MokkaDBConfig")
#mokkadbconf.download.root = "ilctools"
#mokkadbconf.envorder=["MOKKADBCONFIG"]
#mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
#mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
#mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )
#
#ilcsoft.install( ConfigPKG( "LCFI_MokkaBasedNets", LCFI_MokkaBasedNets_version ))
#lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
#lcfinets.download.root = "tagnet"
#lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath



#---------test beam packages 

#ilcsoft.install( Eutelescope( Eutelescope_version ))
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'

ilcsoft.install( GBL ( GBL_version ) )

ilcsoft.install( PathFinder( PathFinder_version ))
ilcsoft.install( MarlinTPC( MarlinTPC_version ))

ilcsoft.install( BBQ( BBQ_version ))

ilcsoft.install( Druid( Druid_version ))

ilcsoft.install( Garlic( Garlic_version ))

#------ slic et al
ilcsoft.install( HepPDT( HepPDT_version ))
ilcsoft.install( GDML( GDML_version ))
ilcsoft.install( LCDD( LCDD_version ))
ilcsoft.install( SLIC( SLIC_version ))


# DD4hep
ilcsoft.install( DD4hep( DD4hep_version )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_WITH_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_WITH_GEAR"]=1


#------- external packages

ilcsoft.install( ROOT( ROOT_version ))

ilcsoft.install( CLHEP( CLHEP_version))

ilcsoft.install( GSL( GSL_version )) 

ilcsoft.install( QT( QT_version ))
#ilcsoft.use (QT("/afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5/QT/4.7.4/" ) )
#-------------------------------------------------------------------


# cmake
ilcsoft.install( CMake( CMake_version  ))

# end of configuration file

