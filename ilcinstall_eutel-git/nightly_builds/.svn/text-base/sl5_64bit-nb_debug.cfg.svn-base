#################################################################
# Configuration file for iLCSoft nightly builds @ DESY
#################################################################


# ILCSoft( "install path for ILC software")
ilcsoft = ILCSoft("/local/nbuilds/"+date_iso8601+"/"+config_file_basename)

# mail adresses for sending nightly build output
mail_addresses=[ "frank.gaede@desy.de", "christoph.rosemann@desy.de" ]

ilcPath = "/afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5/"

#----- global variables -----------------------------------------

# download settings
#-----------------------------------------------
ilcsoft.downloadType = "svn-desy"
#-----------------------------------------------

# additional make options
#-----------------------------------------------
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.envcmake['CMAKE_BUILD_TYPE']='Debug'
ilcsoft.envcmake['INSTALL_DOC']='OFF'
#ilcsoft.envcmake["CMAKE_VERBOSE_MAKEFILE"]=1
#-----------------------------------------------

# enable tests (ctest)
ilcsoft.makeTests=True

# choose compilers
#-----------------------------------------------
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
#-----------------------------------------------

# compiler flags
#-----------------------------------------------
#ilcsoft.env["CXXFLAGS"]="-m32"
#ilcsoft.env["CFLAGS"]="-m32"
#ilcsoft.env["FFLAGS"]="-m32"
#ilcsoft.env["LDFLAGS"]="-m32"
ilcsoft.env["LDFLAGS"]="-Wl,--no-undefined"
#ilcsoft.env["FFLAGS"]="-fbounds-check"
#-----------------------------------------------

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/blah/blah"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/blub/blub"
#-----------------------------------------------

#ilcsoft.envcmake["FORTRAN_LIBRARY_SEARCH_PATH"]="/opt/gcc-4.4.0/lib64/"
#----------------------------------------------------------------

# Marlin + plugins
ilcsoft.install( Marlin( "HEAD" ))
#ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 1

ilcsoft.install( MarlinUtil( "HEAD" ))
ilcsoft.install( Overlay( "HEAD" ))
ilcsoft.install( CEDViewer( "HEAD" ))
ilcsoft.install( MarlinReco( "HEAD" ))
#ilcsoft.module("MarlinReco").envcmake["MARLINRECO_FORTRAN"]="OFF"
ilcsoft.install( PandoraPFANew( "HEAD" ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.install( PandoraAnalysis( "HEAD" ))
ilcsoft.install( MarlinPandora( "HEAD" ))
ilcsoft.install( LCFIVertex( "HEAD" ))
ilcsoft.install( MarlinTPC( "HEAD" ))
#ilcsoft.install( Eutelescope( "HEAD" )) # FIXME
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='tags/V03-03-00'


ilcsoft.install( FastJetClustering( "HEAD" ))

ilcsoft.install( MarlinPKG( "MarlinFastJet", "HEAD" ))
ilcsoft.module("MarlinFastJet").download.root="marlinreco"
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )


ilcsoft.install( MarlinTrk( "HEAD" ))
ilcsoft.install( KiTrack( "HEAD" ))
ilcsoft.install( KiTrackMarlin( "HEAD" ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", "HEAD" ))
ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk'] )

ilcsoft.install( MarlinPKG( "Clupatra", "HEAD" ))
ilcsoft.module("Clupatra").download.root="marlinreco"
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "Physsim", "HEAD" ))
ilcsoft.module("Physsim").download.root="physsim"
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", "HEAD" ))
ilcsoft.module("MarlinKinfit").download.root="marlinreco"
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinPKG( "LCFIPlus", "HEAD" ))
ilcsoft.module("LCFIPlus").download.root="marlinreco"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", "HEAD" ))
ilcsoft.module("ForwardTracking").download.root="marlinreco"
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk', 'KiTrackMarlin'] )


# ilcsoft core packages
ilcsoft.install( ILCUTIL( "HEAD" ))
ilcsoft.install( KalTest( "HEAD" ))
ilcsoft.module("KalTest").envcmake['BUILD_EXAMPLES']='ON'
ilcsoft.install( KalDet( "HEAD" ))
ilcsoft.install( Garlic( "HEAD" ))
ilcsoft.install( Druid( "HEAD" ))
ilcsoft.install( CED( "HEAD" ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'

ilcsoft.install( LCIO( "HEAD" ))
#ilcsoft.module("LCIO").envcmake["BUILD_WITH_DCAP"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_ROOTDICT"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_LCIO_EXAMPLES"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_F77_TESTJOBS"]="ON"
ilcsoft.install( GEAR( "HEAD" ))
ilcsoft.module("GEAR").envcmake['BUILD_TGEO']='ON'
ilcsoft.install( RAIDA( "HEAD" ))
ilcsoft.install( LCCD( "HEAD" ))
ilcsoft.install( CondDBMySQL( "HEAD" ))
ilcsoft.install( PathFinder( "HEAD" ))
ilcsoft.install( BBQ( "HEAD" ))



#----- configs ------------------------------------------------------
##ilcsoft.link( ConfigPKG( "StandardConfig", "/scratch/engels/nbuilds/StandardConfig/HEAD" ) )
#ilcsoft.install( ConfigPKG( "StandardConfig", "HEAD" ))
#stdconf = ilcsoft.module( "StandardConfig")
#stdconf.download.root = "marlinreco"
#stdconf.env["STANDARDCONFIG"]=stdconf.installPath
#
#ilcsoft.install( ConfigPKG( "MokkaDBConfig", "HEAD" ))
#mokkadbconf = ilcsoft.module( "MokkaDBConfig")
#mokkadbconf.download.root = "ilctools"
#mokkadbconf.envorder=["MOKKADBCONFIG"]
#mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
#mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
#mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )
#
#ilcsoft.install( ConfigPKG( "LCFI_MokkaBasedNets", "HEAD" ))
#lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
#lcfinets.download.root = "tagnet"
#lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath

ilcsoft.install( ConfigPKG( "ILDConfig", "HEAD" ))
ildconf = ilcsoft.module( "ILDConfig")
ildconf.download.root = "marlinreco"
ildconf.env["ILDCONFIG"]=ildconf.installPath
# -------------------------------------------------------------------

#ilcsoft.install( Mokka( "mokka-07-00" ))
#ilcsoft.install( Mokka( "mokka-06-07-patch01" ))
#ilcsoft.module("Mokka").download.username="anoncvs"
#ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1
#ilcsoft.module("Mokka").env["CPPVERBOSE"]=1
#ilcsoft.module("Mokka").env["MOKKA_DEBUG"]=1
#ilcsoft.use( Geant4 ( ilcPath + "geant4/9.3.p02" ))
#ilcsoft.module( "Geant4" ).env["G4ENV_INIT"] = ilcPath + "geant4/env_9.3.p02.sh"


#ilcsoft.install( QT( "4.7.4" ))
#ilcsoft.install( CLHEP( "2.1.1.0" ))
#ilcsoft.install( GSL( "1.14" ))
#ilcsoft.install( CMake( "2.8.5" ))
#ilcsoft.install( FastJet ( "2.4.2" ))
#ilcsoft.install( ROOT ( "5.28.00f" ))

#ilcsoft.install( Geant4( "9.5.p01" ))
#geant4=ilcsoft.module("Geant4")
#geant4.envcmake["GEANT4_INSTALL_DATA"]=1
#geant4.envcmake["GEANT4_USE_SYSTEM_EXPAT"]=0 # ignored ??
#geant4.envcmake["GEANT4_USE_SYSTEM_CLHEP"]=1
#geant4.envcmake["GEANT4_USE_OPENGL_X11"]=1
#geant4.envcmake["GEANT4_USE_QT"]=1 # requires qt
#geant4.envcmake["XERCESC_ROOT_DIR"]=ilcPath+"xercesc/2.7.0"
##geant4.envcmake["QT_QMAKE_EXECUTABLE"]=ilcPath+"QT/4.2.2/bin/qmake"


ilcsoft.install( DD4hep( "HEAD" ))
ilcsoft.module("DD4hep").envcmake["DD4HEP_WITH_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_WITH_GEAR"]=1

ilcsoft.install( Mokka( "HEAD" ))
ilcsoft.module("Mokka").envcmake['WITH_GEANT4_TCSH_UI_ONLY']='OFF'

ilcsoft.use( Geant4 ( ilcPath + "geant4/9.6.p01" ))
ilcsoft.use( ROOT( ilcPath + "root/5.34.10" ))
ilcsoft.use( FastJet( ilcPath + "FastJet/2.4.2" ))
ilcsoft.use( CLHEP( ilcPath + "CLHEP/2.1.3.1" ))
ilcsoft.use( GSL( ilcPath + "gsl/1.14" ))
ilcsoft.use( QT( ilcPath + "QT/4.7.4" ))
ilcsoft.use( CERNLIB( ilcPath + "cernlib/2006" ))
ilcsoft.use( MySQL( ilcPath + "mysql/5.0.45" ))
ilcsoft.use( CMake( ilcPath + "CMake/2.8.5" ))

# Java
#ilcsoft.use( Java( ilcPath + "java/1.6.0" ))

# end of configuration file

